// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.2
// source: protos/weather.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WeatherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Lang  string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *WeatherRequest) Reset() {
	*x = WeatherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherRequest) ProtoMessage() {}

func (x *WeatherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherRequest.ProtoReflect.Descriptor instead.
func (*WeatherRequest) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{0}
}

func (x *WeatherRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *WeatherRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Region         string  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Country        string  `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Lat            float64 `protobuf:"fixed64,4,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon            float64 `protobuf:"fixed64,5,opt,name=lon,proto3" json:"lon,omitempty"`
	TzId           string  `protobuf:"bytes,6,opt,name=tz_id,json=tzId,proto3" json:"tz_id,omitempty"`
	LocaltimeEpoch int64   `protobuf:"varint,7,opt,name=localtime_epoch,json=localtimeEpoch,proto3" json:"localtime_epoch,omitempty"`
	Localtime      string  `protobuf:"bytes,8,opt,name=localtime,proto3" json:"localtime,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{1}
}

func (x *Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Location) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Location) GetTzId() string {
	if x != nil {
		return x.TzId
	}
	return ""
}

func (x *Location) GetLocaltimeEpoch() int64 {
	if x != nil {
		return x.LocaltimeEpoch
	}
	return 0
}

func (x *Location) GetLocaltime() string {
	if x != nil {
		return x.Localtime
	}
	return ""
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Code int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{2}
}

func (x *Condition) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Condition) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Condition) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type CurrentWeather struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdatedEpoch int64      `protobuf:"varint,1,opt,name=last_updated_epoch,json=lastUpdatedEpoch,proto3" json:"last_updated_epoch,omitempty"`
	LastUpdated      string     `protobuf:"bytes,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	TempC            float64    `protobuf:"fixed64,3,opt,name=temp_c,json=tempC,proto3" json:"temp_c,omitempty"`
	TempF            float64    `protobuf:"fixed64,4,opt,name=temp_f,json=tempF,proto3" json:"temp_f,omitempty"`
	IsDay            int32      `protobuf:"varint,5,opt,name=is_day,json=isDay,proto3" json:"is_day,omitempty"`
	Condition        *Condition `protobuf:"bytes,6,opt,name=condition,proto3" json:"condition,omitempty"`
	WindMph          float64    `protobuf:"fixed64,7,opt,name=wind_mph,json=windMph,proto3" json:"wind_mph,omitempty"`
	WindKph          float64    `protobuf:"fixed64,8,opt,name=wind_kph,json=windKph,proto3" json:"wind_kph,omitempty"`
	WindDegree       int32      `protobuf:"varint,9,opt,name=wind_degree,json=windDegree,proto3" json:"wind_degree,omitempty"`
	WindDir          string     `protobuf:"bytes,10,opt,name=wind_dir,json=windDir,proto3" json:"wind_dir,omitempty"`
	PressureMb       float64    `protobuf:"fixed64,11,opt,name=pressure_mb,json=pressureMb,proto3" json:"pressure_mb,omitempty"`
	PressureIn       float64    `protobuf:"fixed64,12,opt,name=pressure_in,json=pressureIn,proto3" json:"pressure_in,omitempty"`
	PrecipMm         float64    `protobuf:"fixed64,13,opt,name=precip_mm,json=precipMm,proto3" json:"precip_mm,omitempty"`
	PrecipIn         float64    `protobuf:"fixed64,14,opt,name=precip_in,json=precipIn,proto3" json:"precip_in,omitempty"`
	Humidity         int32      `protobuf:"varint,15,opt,name=humidity,proto3" json:"humidity,omitempty"`
	Cloud            int32      `protobuf:"varint,16,opt,name=cloud,proto3" json:"cloud,omitempty"`
	FeelslikeC       float64    `protobuf:"fixed64,17,opt,name=feelslike_c,json=feelslikeC,proto3" json:"feelslike_c,omitempty"`
	FeelslikeF       float64    `protobuf:"fixed64,18,opt,name=feelslike_f,json=feelslikeF,proto3" json:"feelslike_f,omitempty"`
	WindchillC       float64    `protobuf:"fixed64,19,opt,name=windchill_c,json=windchillC,proto3" json:"windchill_c,omitempty"`
	WindchillF       float64    `protobuf:"fixed64,20,opt,name=windchill_f,json=windchillF,proto3" json:"windchill_f,omitempty"`
	HeatindexC       float64    `protobuf:"fixed64,21,opt,name=heatindex_c,json=heatindexC,proto3" json:"heatindex_c,omitempty"`
	HeatindexF       float64    `protobuf:"fixed64,22,opt,name=heatindex_f,json=heatindexF,proto3" json:"heatindex_f,omitempty"`
	DewpointC        float64    `protobuf:"fixed64,23,opt,name=dewpoint_c,json=dewpointC,proto3" json:"dewpoint_c,omitempty"`
	DewpointF        float64    `protobuf:"fixed64,24,opt,name=dewpoint_f,json=dewpointF,proto3" json:"dewpoint_f,omitempty"`
	VisKm            float64    `protobuf:"fixed64,25,opt,name=vis_km,json=visKm,proto3" json:"vis_km,omitempty"`
	VisMiles         float64    `protobuf:"fixed64,26,opt,name=vis_miles,json=visMiles,proto3" json:"vis_miles,omitempty"`
	Uv               float64    `protobuf:"fixed64,27,opt,name=uv,proto3" json:"uv,omitempty"`
	GustMph          float64    `protobuf:"fixed64,28,opt,name=gust_mph,json=gustMph,proto3" json:"gust_mph,omitempty"`
	GustKph          float64    `protobuf:"fixed64,29,opt,name=gust_kph,json=gustKph,proto3" json:"gust_kph,omitempty"`
}

func (x *CurrentWeather) Reset() {
	*x = CurrentWeather{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentWeather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentWeather) ProtoMessage() {}

func (x *CurrentWeather) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentWeather.ProtoReflect.Descriptor instead.
func (*CurrentWeather) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{3}
}

func (x *CurrentWeather) GetLastUpdatedEpoch() int64 {
	if x != nil {
		return x.LastUpdatedEpoch
	}
	return 0
}

func (x *CurrentWeather) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *CurrentWeather) GetTempC() float64 {
	if x != nil {
		return x.TempC
	}
	return 0
}

func (x *CurrentWeather) GetTempF() float64 {
	if x != nil {
		return x.TempF
	}
	return 0
}

func (x *CurrentWeather) GetIsDay() int32 {
	if x != nil {
		return x.IsDay
	}
	return 0
}

func (x *CurrentWeather) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *CurrentWeather) GetWindMph() float64 {
	if x != nil {
		return x.WindMph
	}
	return 0
}

func (x *CurrentWeather) GetWindKph() float64 {
	if x != nil {
		return x.WindKph
	}
	return 0
}

func (x *CurrentWeather) GetWindDegree() int32 {
	if x != nil {
		return x.WindDegree
	}
	return 0
}

func (x *CurrentWeather) GetWindDir() string {
	if x != nil {
		return x.WindDir
	}
	return ""
}

func (x *CurrentWeather) GetPressureMb() float64 {
	if x != nil {
		return x.PressureMb
	}
	return 0
}

func (x *CurrentWeather) GetPressureIn() float64 {
	if x != nil {
		return x.PressureIn
	}
	return 0
}

func (x *CurrentWeather) GetPrecipMm() float64 {
	if x != nil {
		return x.PrecipMm
	}
	return 0
}

func (x *CurrentWeather) GetPrecipIn() float64 {
	if x != nil {
		return x.PrecipIn
	}
	return 0
}

func (x *CurrentWeather) GetHumidity() int32 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *CurrentWeather) GetCloud() int32 {
	if x != nil {
		return x.Cloud
	}
	return 0
}

func (x *CurrentWeather) GetFeelslikeC() float64 {
	if x != nil {
		return x.FeelslikeC
	}
	return 0
}

func (x *CurrentWeather) GetFeelslikeF() float64 {
	if x != nil {
		return x.FeelslikeF
	}
	return 0
}

func (x *CurrentWeather) GetWindchillC() float64 {
	if x != nil {
		return x.WindchillC
	}
	return 0
}

func (x *CurrentWeather) GetWindchillF() float64 {
	if x != nil {
		return x.WindchillF
	}
	return 0
}

func (x *CurrentWeather) GetHeatindexC() float64 {
	if x != nil {
		return x.HeatindexC
	}
	return 0
}

func (x *CurrentWeather) GetHeatindexF() float64 {
	if x != nil {
		return x.HeatindexF
	}
	return 0
}

func (x *CurrentWeather) GetDewpointC() float64 {
	if x != nil {
		return x.DewpointC
	}
	return 0
}

func (x *CurrentWeather) GetDewpointF() float64 {
	if x != nil {
		return x.DewpointF
	}
	return 0
}

func (x *CurrentWeather) GetVisKm() float64 {
	if x != nil {
		return x.VisKm
	}
	return 0
}

func (x *CurrentWeather) GetVisMiles() float64 {
	if x != nil {
		return x.VisMiles
	}
	return 0
}

func (x *CurrentWeather) GetUv() float64 {
	if x != nil {
		return x.Uv
	}
	return 0
}

func (x *CurrentWeather) GetGustMph() float64 {
	if x != nil {
		return x.GustMph
	}
	return 0
}

func (x *CurrentWeather) GetGustKph() float64 {
	if x != nil {
		return x.GustKph
	}
	return 0
}

type WeatherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *Location       `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Current  *CurrentWeather `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *WeatherResponse) Reset() {
	*x = WeatherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherResponse) ProtoMessage() {}

func (x *WeatherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherResponse.ProtoReflect.Descriptor instead.
func (*WeatherResponse) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{4}
}

func (x *WeatherResponse) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *WeatherResponse) GetCurrent() *CurrentWeather {
	if x != nil {
		return x.Current
	}
	return nil
}

type ForecastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Days   string `protobuf:"bytes,2,opt,name=days,proto3" json:"days,omitempty"`
	Dt     string `protobuf:"bytes,3,opt,name=dt,proto3" json:"dt,omitempty"`
	Unixdt string `protobuf:"bytes,4,opt,name=unixdt,proto3" json:"unixdt,omitempty"`
	Hour   string `protobuf:"bytes,5,opt,name=hour,proto3" json:"hour,omitempty"`
	Lang   string `protobuf:"bytes,6,opt,name=lang,proto3" json:"lang,omitempty"`
	Alerts string `protobuf:"bytes,7,opt,name=alerts,proto3" json:"alerts,omitempty"`
	Aqi    string `protobuf:"bytes,8,opt,name=aqi,proto3" json:"aqi,omitempty"`
}

func (x *ForecastRequest) Reset() {
	*x = ForecastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastRequest) ProtoMessage() {}

func (x *ForecastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastRequest.ProtoReflect.Descriptor instead.
func (*ForecastRequest) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{5}
}

func (x *ForecastRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ForecastRequest) GetDays() string {
	if x != nil {
		return x.Days
	}
	return ""
}

func (x *ForecastRequest) GetDt() string {
	if x != nil {
		return x.Dt
	}
	return ""
}

func (x *ForecastRequest) GetUnixdt() string {
	if x != nil {
		return x.Unixdt
	}
	return ""
}

func (x *ForecastRequest) GetHour() string {
	if x != nil {
		return x.Hour
	}
	return ""
}

func (x *ForecastRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *ForecastRequest) GetAlerts() string {
	if x != nil {
		return x.Alerts
	}
	return ""
}

func (x *ForecastRequest) GetAqi() string {
	if x != nil {
		return x.Aqi
	}
	return ""
}

type Day struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxtempC          float32    `protobuf:"fixed32,1,opt,name=maxtemp_c,json=maxtempC,proto3" json:"maxtemp_c,omitempty"`
	MaxtempF          float32    `protobuf:"fixed32,2,opt,name=maxtemp_f,json=maxtempF,proto3" json:"maxtemp_f,omitempty"`
	MintempC          float32    `protobuf:"fixed32,3,opt,name=mintemp_c,json=mintempC,proto3" json:"mintemp_c,omitempty"`
	MintempF          float32    `protobuf:"fixed32,4,opt,name=mintemp_f,json=mintempF,proto3" json:"mintemp_f,omitempty"`
	AvgtempC          float32    `protobuf:"fixed32,5,opt,name=avgtemp_c,json=avgtempC,proto3" json:"avgtemp_c,omitempty"`
	AvgtempF          float32    `protobuf:"fixed32,6,opt,name=avgtemp_f,json=avgtempF,proto3" json:"avgtemp_f,omitempty"`
	MaxwindMph        float32    `protobuf:"fixed32,7,opt,name=maxwind_mph,json=maxwindMph,proto3" json:"maxwind_mph,omitempty"`
	MaxwindKph        float32    `protobuf:"fixed32,8,opt,name=maxwind_kph,json=maxwindKph,proto3" json:"maxwind_kph,omitempty"`
	TotalprecipMm     float32    `protobuf:"fixed32,9,opt,name=totalprecip_mm,json=totalprecipMm,proto3" json:"totalprecip_mm,omitempty"`
	TotalprecipIn     float32    `protobuf:"fixed32,10,opt,name=totalprecip_in,json=totalprecipIn,proto3" json:"totalprecip_in,omitempty"`
	TotalsnowCm       float32    `protobuf:"fixed32,11,opt,name=totalsnow_cm,json=totalsnowCm,proto3" json:"totalsnow_cm,omitempty"`
	AvgvisKm          float32    `protobuf:"fixed32,12,opt,name=avgvis_km,json=avgvisKm,proto3" json:"avgvis_km,omitempty"`
	AvgvisMiles       float32    `protobuf:"fixed32,13,opt,name=avgvis_miles,json=avgvisMiles,proto3" json:"avgvis_miles,omitempty"`
	Avghumidity       int32      `protobuf:"varint,14,opt,name=avghumidity,proto3" json:"avghumidity,omitempty"`
	DailyWillItRain   int32      `protobuf:"varint,15,opt,name=daily_will_it_rain,json=dailyWillItRain,proto3" json:"daily_will_it_rain,omitempty"`
	DailyChanceOfRain int32      `protobuf:"varint,16,opt,name=daily_chance_of_rain,json=dailyChanceOfRain,proto3" json:"daily_chance_of_rain,omitempty"`
	DailyWillItSnow   int32      `protobuf:"varint,17,opt,name=daily_will_it_snow,json=dailyWillItSnow,proto3" json:"daily_will_it_snow,omitempty"`
	DailyChanceOfSnow int32      `protobuf:"varint,18,opt,name=daily_chance_of_snow,json=dailyChanceOfSnow,proto3" json:"daily_chance_of_snow,omitempty"`
	Condition         *Condition `protobuf:"bytes,19,opt,name=condition,proto3" json:"condition,omitempty"`
	Uv                float64    `protobuf:"fixed64,20,opt,name=uv,proto3" json:"uv,omitempty"`
}

func (x *Day) Reset() {
	*x = Day{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Day) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Day) ProtoMessage() {}

func (x *Day) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Day.ProtoReflect.Descriptor instead.
func (*Day) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{6}
}

func (x *Day) GetMaxtempC() float32 {
	if x != nil {
		return x.MaxtempC
	}
	return 0
}

func (x *Day) GetMaxtempF() float32 {
	if x != nil {
		return x.MaxtempF
	}
	return 0
}

func (x *Day) GetMintempC() float32 {
	if x != nil {
		return x.MintempC
	}
	return 0
}

func (x *Day) GetMintempF() float32 {
	if x != nil {
		return x.MintempF
	}
	return 0
}

func (x *Day) GetAvgtempC() float32 {
	if x != nil {
		return x.AvgtempC
	}
	return 0
}

func (x *Day) GetAvgtempF() float32 {
	if x != nil {
		return x.AvgtempF
	}
	return 0
}

func (x *Day) GetMaxwindMph() float32 {
	if x != nil {
		return x.MaxwindMph
	}
	return 0
}

func (x *Day) GetMaxwindKph() float32 {
	if x != nil {
		return x.MaxwindKph
	}
	return 0
}

func (x *Day) GetTotalprecipMm() float32 {
	if x != nil {
		return x.TotalprecipMm
	}
	return 0
}

func (x *Day) GetTotalprecipIn() float32 {
	if x != nil {
		return x.TotalprecipIn
	}
	return 0
}

func (x *Day) GetTotalsnowCm() float32 {
	if x != nil {
		return x.TotalsnowCm
	}
	return 0
}

func (x *Day) GetAvgvisKm() float32 {
	if x != nil {
		return x.AvgvisKm
	}
	return 0
}

func (x *Day) GetAvgvisMiles() float32 {
	if x != nil {
		return x.AvgvisMiles
	}
	return 0
}

func (x *Day) GetAvghumidity() int32 {
	if x != nil {
		return x.Avghumidity
	}
	return 0
}

func (x *Day) GetDailyWillItRain() int32 {
	if x != nil {
		return x.DailyWillItRain
	}
	return 0
}

func (x *Day) GetDailyChanceOfRain() int32 {
	if x != nil {
		return x.DailyChanceOfRain
	}
	return 0
}

func (x *Day) GetDailyWillItSnow() int32 {
	if x != nil {
		return x.DailyWillItSnow
	}
	return 0
}

func (x *Day) GetDailyChanceOfSnow() int32 {
	if x != nil {
		return x.DailyChanceOfSnow
	}
	return 0
}

func (x *Day) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Day) GetUv() float64 {
	if x != nil {
		return x.Uv
	}
	return 0
}

type Astro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sunrise          string `protobuf:"bytes,1,opt,name=sunrise,proto3" json:"sunrise,omitempty"`
	Sunset           string `protobuf:"bytes,2,opt,name=sunset,proto3" json:"sunset,omitempty"`
	Moonrise         string `protobuf:"bytes,3,opt,name=moonrise,proto3" json:"moonrise,omitempty"`
	Moonset          string `protobuf:"bytes,4,opt,name=moonset,proto3" json:"moonset,omitempty"`
	MoonPhase        string `protobuf:"bytes,5,opt,name=moon_phase,json=moonPhase,proto3" json:"moon_phase,omitempty"`
	MoonIllumination int32  `protobuf:"varint,6,opt,name=moon_illumination,json=moonIllumination,proto3" json:"moon_illumination,omitempty"`
	IsMoonUp         int32  `protobuf:"varint,7,opt,name=is_moon_up,json=isMoonUp,proto3" json:"is_moon_up,omitempty"`
	IsSunUp          int32  `protobuf:"varint,8,opt,name=is_sun_up,json=isSunUp,proto3" json:"is_sun_up,omitempty"`
}

func (x *Astro) Reset() {
	*x = Astro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Astro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Astro) ProtoMessage() {}

func (x *Astro) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Astro.ProtoReflect.Descriptor instead.
func (*Astro) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{7}
}

func (x *Astro) GetSunrise() string {
	if x != nil {
		return x.Sunrise
	}
	return ""
}

func (x *Astro) GetSunset() string {
	if x != nil {
		return x.Sunset
	}
	return ""
}

func (x *Astro) GetMoonrise() string {
	if x != nil {
		return x.Moonrise
	}
	return ""
}

func (x *Astro) GetMoonset() string {
	if x != nil {
		return x.Moonset
	}
	return ""
}

func (x *Astro) GetMoonPhase() string {
	if x != nil {
		return x.MoonPhase
	}
	return ""
}

func (x *Astro) GetMoonIllumination() int32 {
	if x != nil {
		return x.MoonIllumination
	}
	return 0
}

func (x *Astro) GetIsMoonUp() int32 {
	if x != nil {
		return x.IsMoonUp
	}
	return 0
}

func (x *Astro) GetIsSunUp() int32 {
	if x != nil {
		return x.IsSunUp
	}
	return 0
}

type Hour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeEpoch    int64      `protobuf:"varint,1,opt,name=time_epoch,json=timeEpoch,proto3" json:"time_epoch,omitempty"`
	Time         string     `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	TempC        float64    `protobuf:"fixed64,3,opt,name=temp_c,json=tempC,proto3" json:"temp_c,omitempty"`
	TempF        float64    `protobuf:"fixed64,4,opt,name=temp_f,json=tempF,proto3" json:"temp_f,omitempty"`
	IsDay        int32      `protobuf:"varint,5,opt,name=is_day,json=isDay,proto3" json:"is_day,omitempty"`
	Condition    *Condition `protobuf:"bytes,6,opt,name=condition,proto3" json:"condition,omitempty"`
	WindMph      float64    `protobuf:"fixed64,7,opt,name=wind_mph,json=windMph,proto3" json:"wind_mph,omitempty"`
	WindKph      float64    `protobuf:"fixed64,8,opt,name=wind_kph,json=windKph,proto3" json:"wind_kph,omitempty"`
	WindDegree   int32      `protobuf:"varint,9,opt,name=wind_degree,json=windDegree,proto3" json:"wind_degree,omitempty"`
	WindDir      string     `protobuf:"bytes,10,opt,name=wind_dir,json=windDir,proto3" json:"wind_dir,omitempty"`
	PressureMb   float64    `protobuf:"fixed64,11,opt,name=pressure_mb,json=pressureMb,proto3" json:"pressure_mb,omitempty"`
	PressureIn   float64    `protobuf:"fixed64,12,opt,name=pressure_in,json=pressureIn,proto3" json:"pressure_in,omitempty"`
	PrecipMm     float64    `protobuf:"fixed64,13,opt,name=precip_mm,json=precipMm,proto3" json:"precip_mm,omitempty"`
	PrecipIn     float64    `protobuf:"fixed64,14,opt,name=precip_in,json=precipIn,proto3" json:"precip_in,omitempty"`
	SnowCm       float64    `protobuf:"fixed64,15,opt,name=snow_cm,json=snowCm,proto3" json:"snow_cm,omitempty"`
	Humidity     int32      `protobuf:"varint,16,opt,name=humidity,proto3" json:"humidity,omitempty"`
	Cloud        int32      `protobuf:"varint,17,opt,name=cloud,proto3" json:"cloud,omitempty"`
	FeelslikeC   float64    `protobuf:"fixed64,18,opt,name=feelslike_c,json=feelslikeC,proto3" json:"feelslike_c,omitempty"`
	FeelslikeF   float64    `protobuf:"fixed64,19,opt,name=feelslike_f,json=feelslikeF,proto3" json:"feelslike_f,omitempty"`
	WindchillC   float64    `protobuf:"fixed64,20,opt,name=windchill_c,json=windchillC,proto3" json:"windchill_c,omitempty"`
	WindchillF   float64    `protobuf:"fixed64,21,opt,name=windchill_f,json=windchillF,proto3" json:"windchill_f,omitempty"`
	HeatindexC   float64    `protobuf:"fixed64,22,opt,name=heatindex_c,json=heatindexC,proto3" json:"heatindex_c,omitempty"`
	HeatindexF   float64    `protobuf:"fixed64,23,opt,name=heatindex_f,json=heatindexF,proto3" json:"heatindex_f,omitempty"`
	DewpointC    float64    `protobuf:"fixed64,24,opt,name=dewpoint_c,json=dewpointC,proto3" json:"dewpoint_c,omitempty"`
	DewpointF    float64    `protobuf:"fixed64,25,opt,name=dewpoint_f,json=dewpointF,proto3" json:"dewpoint_f,omitempty"`
	WillItRain   int32      `protobuf:"varint,26,opt,name=will_it_rain,json=willItRain,proto3" json:"will_it_rain,omitempty"`
	ChanceOfRain int32      `protobuf:"varint,27,opt,name=chance_of_rain,json=chanceOfRain,proto3" json:"chance_of_rain,omitempty"`
	WillItSnow   int32      `protobuf:"varint,28,opt,name=will_it_snow,json=willItSnow,proto3" json:"will_it_snow,omitempty"`
	ChanceOfSnow int32      `protobuf:"varint,29,opt,name=chance_of_snow,json=chanceOfSnow,proto3" json:"chance_of_snow,omitempty"`
	VisKm        float64    `protobuf:"fixed64,30,opt,name=vis_km,json=visKm,proto3" json:"vis_km,omitempty"`
	VisMiles     float64    `protobuf:"fixed64,31,opt,name=vis_miles,json=visMiles,proto3" json:"vis_miles,omitempty"`
	GustMph      float64    `protobuf:"fixed64,32,opt,name=gust_mph,json=gustMph,proto3" json:"gust_mph,omitempty"`
	GustKph      float64    `protobuf:"fixed64,33,opt,name=gust_kph,json=gustKph,proto3" json:"gust_kph,omitempty"`
	Uv           float64    `protobuf:"fixed64,34,opt,name=uv,proto3" json:"uv,omitempty"`
}

func (x *Hour) Reset() {
	*x = Hour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hour) ProtoMessage() {}

func (x *Hour) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hour.ProtoReflect.Descriptor instead.
func (*Hour) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{8}
}

func (x *Hour) GetTimeEpoch() int64 {
	if x != nil {
		return x.TimeEpoch
	}
	return 0
}

func (x *Hour) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Hour) GetTempC() float64 {
	if x != nil {
		return x.TempC
	}
	return 0
}

func (x *Hour) GetTempF() float64 {
	if x != nil {
		return x.TempF
	}
	return 0
}

func (x *Hour) GetIsDay() int32 {
	if x != nil {
		return x.IsDay
	}
	return 0
}

func (x *Hour) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Hour) GetWindMph() float64 {
	if x != nil {
		return x.WindMph
	}
	return 0
}

func (x *Hour) GetWindKph() float64 {
	if x != nil {
		return x.WindKph
	}
	return 0
}

func (x *Hour) GetWindDegree() int32 {
	if x != nil {
		return x.WindDegree
	}
	return 0
}

func (x *Hour) GetWindDir() string {
	if x != nil {
		return x.WindDir
	}
	return ""
}

func (x *Hour) GetPressureMb() float64 {
	if x != nil {
		return x.PressureMb
	}
	return 0
}

func (x *Hour) GetPressureIn() float64 {
	if x != nil {
		return x.PressureIn
	}
	return 0
}

func (x *Hour) GetPrecipMm() float64 {
	if x != nil {
		return x.PrecipMm
	}
	return 0
}

func (x *Hour) GetPrecipIn() float64 {
	if x != nil {
		return x.PrecipIn
	}
	return 0
}

func (x *Hour) GetSnowCm() float64 {
	if x != nil {
		return x.SnowCm
	}
	return 0
}

func (x *Hour) GetHumidity() int32 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *Hour) GetCloud() int32 {
	if x != nil {
		return x.Cloud
	}
	return 0
}

func (x *Hour) GetFeelslikeC() float64 {
	if x != nil {
		return x.FeelslikeC
	}
	return 0
}

func (x *Hour) GetFeelslikeF() float64 {
	if x != nil {
		return x.FeelslikeF
	}
	return 0
}

func (x *Hour) GetWindchillC() float64 {
	if x != nil {
		return x.WindchillC
	}
	return 0
}

func (x *Hour) GetWindchillF() float64 {
	if x != nil {
		return x.WindchillF
	}
	return 0
}

func (x *Hour) GetHeatindexC() float64 {
	if x != nil {
		return x.HeatindexC
	}
	return 0
}

func (x *Hour) GetHeatindexF() float64 {
	if x != nil {
		return x.HeatindexF
	}
	return 0
}

func (x *Hour) GetDewpointC() float64 {
	if x != nil {
		return x.DewpointC
	}
	return 0
}

func (x *Hour) GetDewpointF() float64 {
	if x != nil {
		return x.DewpointF
	}
	return 0
}

func (x *Hour) GetWillItRain() int32 {
	if x != nil {
		return x.WillItRain
	}
	return 0
}

func (x *Hour) GetChanceOfRain() int32 {
	if x != nil {
		return x.ChanceOfRain
	}
	return 0
}

func (x *Hour) GetWillItSnow() int32 {
	if x != nil {
		return x.WillItSnow
	}
	return 0
}

func (x *Hour) GetChanceOfSnow() int32 {
	if x != nil {
		return x.ChanceOfSnow
	}
	return 0
}

func (x *Hour) GetVisKm() float64 {
	if x != nil {
		return x.VisKm
	}
	return 0
}

func (x *Hour) GetVisMiles() float64 {
	if x != nil {
		return x.VisMiles
	}
	return 0
}

func (x *Hour) GetGustMph() float64 {
	if x != nil {
		return x.GustMph
	}
	return 0
}

func (x *Hour) GetGustKph() float64 {
	if x != nil {
		return x.GustKph
	}
	return 0
}

func (x *Hour) GetUv() float64 {
	if x != nil {
		return x.Uv
	}
	return 0
}

type ForecastDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	DateEpoch int64   `protobuf:"varint,2,opt,name=date_epoch,json=dateEpoch,proto3" json:"date_epoch,omitempty"`
	Day       *Day    `protobuf:"bytes,3,opt,name=day,proto3" json:"day,omitempty"`
	Astro     *Astro  `protobuf:"bytes,4,opt,name=astro,proto3" json:"astro,omitempty"`
	Hour      []*Hour `protobuf:"bytes,5,rep,name=hour,proto3" json:"hour,omitempty"`
}

func (x *ForecastDay) Reset() {
	*x = ForecastDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastDay) ProtoMessage() {}

func (x *ForecastDay) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastDay.ProtoReflect.Descriptor instead.
func (*ForecastDay) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{9}
}

func (x *ForecastDay) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ForecastDay) GetDateEpoch() int64 {
	if x != nil {
		return x.DateEpoch
	}
	return 0
}

func (x *ForecastDay) GetDay() *Day {
	if x != nil {
		return x.Day
	}
	return nil
}

func (x *ForecastDay) GetAstro() *Astro {
	if x != nil {
		return x.Astro
	}
	return nil
}

func (x *ForecastDay) GetHour() []*Hour {
	if x != nil {
		return x.Hour
	}
	return nil
}

type Forecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forecastday []*ForecastDay `protobuf:"bytes,1,rep,name=forecastday,proto3" json:"forecastday,omitempty"`
}

func (x *Forecast) Reset() {
	*x = Forecast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forecast) ProtoMessage() {}

func (x *Forecast) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forecast.ProtoReflect.Descriptor instead.
func (*Forecast) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{10}
}

func (x *Forecast) GetForecastday() []*ForecastDay {
	if x != nil {
		return x.Forecastday
	}
	return nil
}

type ForecastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *Location       `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Current  *CurrentWeather `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	Forecast *Forecast       `protobuf:"bytes,3,opt,name=forecast,proto3" json:"forecast,omitempty"`
}

func (x *ForecastResponse) Reset() {
	*x = ForecastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_weather_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastResponse) ProtoMessage() {}

func (x *ForecastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_weather_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastResponse.ProtoReflect.Descriptor instead.
func (*ForecastResponse) Descriptor() ([]byte, []int) {
	return file_protos_weather_proto_rawDescGZIP(), []int{11}
}

func (x *ForecastResponse) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ForecastResponse) GetCurrent() *CurrentWeather {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *ForecastResponse) GetForecast() *Forecast {
	if x != nil {
		return x.Forecast
	}
	return nil
}

var File_protos_weather_proto protoreflect.FileDescriptor

var file_protos_weather_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x22,
	0x3a, 0x0a, 0x0e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0xd0, 0x01, 0x0a, 0x08,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x7a, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x47,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xf6, 0x06, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x65, 0x6d,
	0x70, 0x43, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x44, 0x61, 0x79,
	0x12, 0x30, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x70, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x4d, 0x70, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6b, 0x70, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x77, 0x69, 0x6e, 0x64, 0x4b, 0x70, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64,
	0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77,
	0x69, 0x6e, 0x64, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e,
	0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x69, 0x6e,
	0x64, 0x44, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x6d, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x4d, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x5f, 0x6d, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x4d, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x5f, 0x69, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x49, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f,
	0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x6c, 0x69,
	0x6b, 0x65, 0x43, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x6c, 0x69, 0x6b, 0x65,
	0x5f, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x46, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c,
	0x6c, 0x5f, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x63,
	0x68, 0x69, 0x6c, 0x6c, 0x43, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x63, 0x68, 0x69,
	0x6c, 0x6c, 0x5f, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64,
	0x63, 0x68, 0x69, 0x6c, 0x6c, 0x46, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x77, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65,
	0x77, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x77, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x66, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x77,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x69, 0x73, 0x5f, 0x6b, 0x6d,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x69, 0x73, 0x4b, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x76, 0x69, 0x73, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x76,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x75, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75,
	0x73, 0x74, 0x5f, 0x6d, 0x70, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x75,
	0x73, 0x74, 0x4d, 0x70, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x73, 0x74, 0x5f, 0x6b, 0x70,
	0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x75, 0x73, 0x74, 0x4b, 0x70, 0x68,
	0x22, 0x73, 0x0a, 0x0f, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x64, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x78, 0x64, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x78, 0x64, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x71, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x71, 0x69, 0x22, 0xc6, 0x05,
	0x0a, 0x03, 0x44, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x74, 0x65, 0x6d,
	0x70, 0x43, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x43, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x76,
	0x67, 0x74, 0x65, 0x6d, 0x70, 0x43, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x74, 0x65, 0x6d,
	0x70, 0x5f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x76, 0x67, 0x74, 0x65,
	0x6d, 0x70, 0x46, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6d,
	0x70, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x77, 0x69, 0x6e,
	0x64, 0x4d, 0x70, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x77, 0x69, 0x6e, 0x64, 0x5f,
	0x6b, 0x70, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x77, 0x69,
	0x6e, 0x64, 0x4b, 0x70, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x5f, 0x6d, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x4d, 0x6d, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x49, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x6e, 0x6f, 0x77,
	0x5f, 0x63, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x73, 0x6e, 0x6f, 0x77, 0x43, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x76, 0x69, 0x73,
	0x5f, 0x6b, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x76, 0x67, 0x76, 0x69,
	0x73, 0x4b, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x76, 0x69, 0x73, 0x5f, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x76, 0x69,
	0x73, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x68, 0x75, 0x6d,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x67,
	0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x69, 0x6c, 0x6c, 0x49,
	0x74, 0x52, 0x61, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x66, 0x52, 0x61, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x74, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x53,
	0x6e, 0x6f, 0x77, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66,
	0x53, 0x6e, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x76, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x75, 0x76, 0x22, 0xf5, 0x01, 0x0a, 0x05, 0x41, 0x73, 0x74, 0x72, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x6e, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x73,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x6f, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x6f, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6f, 0x6e,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x6f, 0x6e, 0x5f,
	0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6d, 0x6f, 0x6f, 0x6e, 0x49, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x6f, 0x6e, 0x5f,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x6f, 0x6e,
	0x55, 0x70, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6e, 0x5f, 0x75, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x53, 0x75, 0x6e, 0x55, 0x70, 0x22, 0xf7,
	0x07, 0x0a, 0x04, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70,
	0x43, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x44, 0x61, 0x79, 0x12,
	0x30, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x70, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x4d, 0x70, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x77, 0x69, 0x6e, 0x64, 0x5f, 0x6b, 0x70, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x77, 0x69, 0x6e, 0x64, 0x4b, 0x70, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x5f,
	0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69,
	0x6e, 0x64, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64,
	0x44, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f,
	0x6d, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x4d, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x5f,
	0x6d, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x4d, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x63, 0x69, 0x70, 0x49, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6e, 0x6f, 0x77, 0x5f, 0x63, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x73, 0x6e, 0x6f, 0x77, 0x43, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65,
	0x65, 0x6c, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x65, 0x65, 0x6c, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x66, 0x65, 0x65, 0x6c, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x69, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x43, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x69, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x5f, 0x66, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x46, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x77, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x77, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x77, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x77, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x12, 0x20,
	0x0a, 0x0c, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x52, 0x61, 0x69, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x61,
	0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x66, 0x52, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x69,
	0x74, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69,
	0x6c, 0x6c, 0x49, 0x74, 0x53, 0x6e, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x53, 0x6e, 0x6f, 0x77, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x69, 0x73, 0x5f, 0x6b, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x69, 0x73, 0x4b, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x69, 0x73, 0x4d, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x73, 0x74, 0x5f, 0x6d, 0x70, 0x68, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x75, 0x73, 0x74, 0x4d, 0x70, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x75, 0x73, 0x74, 0x5f, 0x6b, 0x70, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x67, 0x75, 0x73, 0x74, 0x4b, 0x70, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x76, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x75, 0x76, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x03, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x2e, 0x44, 0x61, 0x79, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x61,
	0x73, 0x74, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x52, 0x05, 0x61, 0x73, 0x74, 0x72,
	0x6f, 0x12, 0x21, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x22, 0x42, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x64, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x52, 0x0b, 0x66, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x64, 0x61, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x32, 0xa8,
	0x01, 0x0a, 0x0e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x12, 0x18, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2e, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protos_weather_proto_rawDescOnce sync.Once
	file_protos_weather_proto_rawDescData = file_protos_weather_proto_rawDesc
)

func file_protos_weather_proto_rawDescGZIP() []byte {
	file_protos_weather_proto_rawDescOnce.Do(func() {
		file_protos_weather_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_weather_proto_rawDescData)
	})
	return file_protos_weather_proto_rawDescData
}

var file_protos_weather_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_protos_weather_proto_goTypes = []interface{}{
	(*WeatherRequest)(nil),   // 0: weather.WeatherRequest
	(*Location)(nil),         // 1: weather.Location
	(*Condition)(nil),        // 2: weather.Condition
	(*CurrentWeather)(nil),   // 3: weather.CurrentWeather
	(*WeatherResponse)(nil),  // 4: weather.WeatherResponse
	(*ForecastRequest)(nil),  // 5: weather.ForecastRequest
	(*Day)(nil),              // 6: weather.Day
	(*Astro)(nil),            // 7: weather.Astro
	(*Hour)(nil),             // 8: weather.Hour
	(*ForecastDay)(nil),      // 9: weather.ForecastDay
	(*Forecast)(nil),         // 10: weather.Forecast
	(*ForecastResponse)(nil), // 11: weather.ForecastResponse
}
var file_protos_weather_proto_depIdxs = []int32{
	2,  // 0: weather.CurrentWeather.condition:type_name -> weather.Condition
	1,  // 1: weather.WeatherResponse.location:type_name -> weather.Location
	3,  // 2: weather.WeatherResponse.current:type_name -> weather.CurrentWeather
	2,  // 3: weather.Day.condition:type_name -> weather.Condition
	2,  // 4: weather.Hour.condition:type_name -> weather.Condition
	6,  // 5: weather.ForecastDay.day:type_name -> weather.Day
	7,  // 6: weather.ForecastDay.astro:type_name -> weather.Astro
	8,  // 7: weather.ForecastDay.hour:type_name -> weather.Hour
	9,  // 8: weather.Forecast.forecastday:type_name -> weather.ForecastDay
	1,  // 9: weather.ForecastResponse.location:type_name -> weather.Location
	3,  // 10: weather.ForecastResponse.current:type_name -> weather.CurrentWeather
	10, // 11: weather.ForecastResponse.forecast:type_name -> weather.Forecast
	0,  // 12: weather.WeatherService.GetRealtimeWeather:input_type -> weather.WeatherRequest
	5,  // 13: weather.WeatherService.GetForecastWeather:input_type -> weather.ForecastRequest
	4,  // 14: weather.WeatherService.GetRealtimeWeather:output_type -> weather.WeatherResponse
	11, // 15: weather.WeatherService.GetForecastWeather:output_type -> weather.ForecastResponse
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_protos_weather_proto_init() }
func file_protos_weather_proto_init() {
	if File_protos_weather_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_weather_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentWeather); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Day); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Astro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forecast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_weather_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_weather_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_weather_proto_goTypes,
		DependencyIndexes: file_protos_weather_proto_depIdxs,
		MessageInfos:      file_protos_weather_proto_msgTypes,
	}.Build()
	File_protos_weather_proto = out.File
	file_protos_weather_proto_rawDesc = nil
	file_protos_weather_proto_goTypes = nil
	file_protos_weather_proto_depIdxs = nil
}
